name: Test COTR Docker

on:
  push:
    branches:
      - main # Trigger this workflow whenever code is pushed to the 'main' branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the 'main' branch
  workflow_dispatch: # This allows you to manually trigger the workflow from the 'Actions' tab on GitHub

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Run this job on a fresh Ubuntu virtual machine provided by GitHub

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4 # Essential step to get your project's code onto the runner

      - name: Verify Dockerfile existence
        # This step helps debug by checking if the Dockerfile is where it's expected.
        # IF YOUR DOCKERFILE IS NOT IN THE ROOT DIRECTORY OF YOUR REPOSITORY:
        # You MUST update the path below AND in the 'Build COTR Docker image' step.
        # For example, if your Dockerfile is at 'my-app/Dockerfile', change "Dockerfile" to "my-app/Dockerfile".
        run: |
          if [ -f "Dockerfile" ]; then
            echo "Dockerfile found in the root directory. Proceeding with build."
          elif [ -f "my-app/Dockerfile" ]; then # Example for a common subdirectory
            echo "Dockerfile found in 'my-app/' directory. Adjusting build context."
            # This 'if' block is for demonstration. You should set the correct path directly below.
            # You would actually modify the 'context' and 'file' parameters in the next step.
          else
            echo "Error: Dockerfile not found. Please ensure it's named 'Dockerfile' and is at the top level of your repository,"
            echo "OR if it's in a subdirectory, update the 'context' and potentially 'file' paths in the 'Build COTR Docker image' step."
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Prepares the environment for efficient Docker image building

      - name: Build COTR Docker image
        # This step builds your Docker image from the Dockerfile.
        # 'load: true' is crucial here as it makes the built image available for subsequent steps in the same job.
        uses: docker/build-push-action@v6
        with:
          # IMPORTANT: Adjust 'context' if your Dockerfile is not in the root.
          # For example, if your Dockerfile is in a 'dockerfiles/cotr/' folder:
          # context: ./dockerfiles/cotr/
          # If the Dockerfile itself has a different name or path relative to the context:
          # file: ./dockerfiles/cotr/Dockerfile # Only needed if 'Dockerfile' isn't the default name or directly in context.
          context: . # Current assumption: Dockerfile is in the repository root.
          load: true # Load the image into the local Docker daemon of the GitHub Actions runner
          tags: cotr-docker-test:latest # Assign a tag to your image for easy reference

      - name: Run COTR application (as a test)
        # The Dockerfile specifies 'CMD ["/bin/cotr"]'.
        # Running the image without additional commands will execute this default.
        # The success or failure of this step will depend on how '/bin/cotr' behaves.
        # If '/bin/cotr' exits with a non-zero status code, this step will fail.
        run: |
          echo "--- STARTING COTR APPLICATION FOR TESTING ---"
          # This command will only run if the 'Build COTR Docker image' step completes successfully.
          docker run --rm cotr-docker-test
          echo "--- COTR APPLICATION TEST FINISHED ---"

        # The 'if: always()' ensures this step runs even if previous steps failed,
        # helping you debug issues by always seeing the test output.
        if: always()
