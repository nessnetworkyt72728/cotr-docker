name: Test COTR Docker

on:
  push:
    branches:
      - main # Trigger this workflow whenever code is pushed to the 'main' branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the 'main' branch
  workflow_dispatch: # This allows you to manually trigger the workflow from the 'Actions' tab on GitHub

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Run this job on a fresh Ubuntu virtual machine provided by GitHub

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4 # Essential step to get your project's code onto the runner

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Prepares the environment for efficient Docker image building

      - name: Build COTR Docker image
        # This step builds your Docker image from the Dockerfile.
        # 'load: true' is crucial here as it makes the built image available for subsequent steps in the same job.
        uses: docker/build-push-action@v6
        with:
          # IMPORTANT: The Dockerfile is now correctly pointed to the 'cotr-server' subdirectory.
          # If you move your Dockerfile again, this 'context' path will need to be updated.
          context: ./cotr-server/ # <--- THIS LINE HAS BEEN UPDATED!
          load: true # Load the image into the local Docker daemon of the GitHub Actions runner
          tags: cotr-docker-test:latest # Assign a tag to your image for easy reference

      - name: Run COTR application (as a test)
        # This step will only run if the 'Build COTR Docker image' step completes successfully.
        # The Dockerfile specifies 'CMD ["/bin/cotr"]'. Running the image without
        # additional commands will execute this default command.
        # The success or failure of this step depends on '/bin/cotr' exiting with a zero or non-zero status code.
        run: |
          echo "--- STARTING COTR APPLICATION FOR TESTING ---"
          docker run --rm cotr-docker-test
          echo "--- COTR APPLICATION TEST FINISHED ---"

        # The 'if: always()' ensures this step's logs are visible even if previous steps failed,
        # which is helpful for debugging purposes.
        if: always()
