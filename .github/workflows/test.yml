name: Test COTR Docker

on:
  push:
    branches:
      - main # Trigger this workflow whenever code is pushed to the 'main' branch
  pull_request:
    branches:
      - main # Trigger on pull requests targeting the 'main' branch
  workflow_dispatch: # This allows you to manually trigger the workflow from the 'Actions' tab on GitHub

jobs:
  build-and-test:
    runs-on: ubuntu-latest # Run this job on a fresh Ubuntu virtual machine provided by GitHub

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4 # Essential step to get your project's code onto the runner

      - name: Verify Dockerfile existence
        # This step checks if a Dockerfile exists at the root, which is the default 'context: .'
        # If this step fails, it means your Dockerfile is NOT in the root directory.
        run: |
          if [ -f "Dockerfile" ]; then
            echo "Dockerfile found in the root directory. Proceeding with build."
          else
            echo "Error: Dockerfile not found in the root directory."
            echo "Please ensure your Dockerfile is named 'Dockerfile' (with a capital 'D') and is at the top level of your repository."
            echo "Alternatively, if it's in a subdirectory (e.g., 'my-project/Dockerfile'), you MUST update the 'context' parameter in the 'Build COTR Docker image' step below."
            exit 1
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Prepares the environment for efficient Docker image building

      - name: Build COTR Docker image
        # This step builds your Docker image from the Dockerfile.
        # 'load: true' is crucial here as it makes the built image available for subsequent steps in the same job.
        uses: docker/build-push-action@v6
        with:
          # IMPORTANT: You MUST adjust 'context' (and potentially 'file') if your Dockerfile is NOT in the root.
          # Example 1: If your Dockerfile is in a folder named 'my-project' directly in your repository's root:
          # context: ./my-project/
          #
          # Example 2: If your Dockerfile is in 'another-folder/docker-builds/':
          # context: ./another-folder/docker-builds/
          #
          # Example 3: If your Dockerfile is named 'MyCustomDockerfile' in the root:
          # context: .
          # file: ./MyCustomDockerfile
          #
          # Example 4: If your Dockerfile is named 'MyCustomDockerfile' within 'my-project/':
          # context: ./my-project/
          # file: ./my-project/MyCustomDockerfile
          context: . # <--- CHANGE THIS LINE IF YOUR DOCKERFILE IS NOT IN THE REPOSITORY ROOT!
          load: true # Load the image into the local Docker daemon of the GitHub Actions runner
          tags: cotr-docker-test:latest # Assign a tag to your image for easy reference

      - name: Run COTR application (as a test)
        # This step will only run if the 'Build COTR Docker image' step completes successfully.
        # The Dockerfile specifies 'CMD ["/bin/cotr"]'. Running the image without
        # additional commands will execute this default command.
        # The success or failure of this step depends on '/bin/cotr' exiting with a zero or non-zero status code.
        run: |
          echo "--- STARTING COTR APPLICATION FOR TESTING ---"
          docker run --rm cotr-docker-test
          echo "--- COTR APPLICATION TEST FINISHED ---"

        # The 'if: always()' ensures this step's logs are visible even if previous steps failed,
        # which is helpful for debugging purposes.
        if: always()
